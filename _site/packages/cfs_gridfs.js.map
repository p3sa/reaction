{"version":3,"sources":["meteor://ðŸ’»app/packages/cfs:gridfs/gridfs.client.js"],"names":["FS","Store","GridFS","name","options","self","Error","StorageAdapter","typeName"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,oB,CAEA;;;;;;;;;;;wBAYAA,GAAGC,KAAH,CAASC,MAAT,GAAkB,UAAUC,IAAV,EAAgBC,OAAhB,EAAyB;AACzC,MAAMC,OAAO,IAAb;;AACA,MAAI,EAAEA,gBAAgBL,GAAGC,KAAH,CAASC,MAA3B,CAAJ,EAA2C;AACzC,UAAM,IAAII,KAAJ,CAAU,uCAAV,CAAN;AACD;;AAED,SAAO,IAAIN,GAAGO,cAAP,CAAsBJ,IAAtB,EAA4BC,OAA5B,EAAqC;AAC1CI,cAAU;AADgC,GAArC,CAAP;AAGD,CATD,wG","file":"/packages/cfs_gridfs.js","sourcesContent":["/* eslint-disable */\n\n/**\n * @public\n * @constructor\n * @param {String} name - The store name\n * @param {Object} options\n * @param {Function} [options.beforeSave] - Function to run before saving a file from the client. The context of the function will be the `FS.File` instance we're saving. The function may alter its properties.\n * @param {Number} [options.maxTries=5] - Max times to attempt saving a file\n * @returns {undefined}\n *\n * Creates a GridFS store instance on the client, which is just a shell object\n * storing some info.\n */\nFS.Store.GridFS = function (name, options) {\n  const self = this;\n  if (!(self instanceof FS.Store.GridFS))    {\n    throw new Error('FS.Store.GridFS missing keyword \"new\"');\n  }\n\n  return new FS.StorageAdapter(name, options, {\n    typeName: \"storage.gridfs\"\n  });\n};\n"]}